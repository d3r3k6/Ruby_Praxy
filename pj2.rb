#This program evaluates the answer to the Euler Project Problem 2
=begin
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
=end

#first here is the pseudocode 

#Generate a Fibonacci sequence and store in an array such that [-1] > four million
#lamda an expression to total the evn sumbers

puts "This program will sum the even numbers in a generate Fibonacci sequence in which you define the upper limit"
puts "Please enter the upper bound of the Fibonacci sequence you would like to sum."

upper_bound = gets.to_i

#the most ruby way to generate a fibonacci sequence is through memoization
#However for this project we need to evaluate an array for the upper_bound variable.
#Recursion is too computationally intensive. We will use iteration. More memory intensive. 

fib_array = [0,1]

while fib_array[-1] <= upper_bound
	#write function in here
	end	
end		




